package Consumer

import Resources
import Array 

/// Consumers can be aggregated to large groups.
/// That is used to display summary for player about 
/// consuming a resource by category. 
public enum ConsumeCategory 
    /// Consumation of non army population
    PEACEFULL_POPULATION 
    /// Consumation of armed population 
    ARMY
    /// Consumation by building 
    BUILDING

/// Defines an entity that consumes food periodically
///
/// Note that all consumers should also handle add/remove 
/// events via 'FoodConsumerAdded' and 'FoodConsumerRemoved'
public interface FoodConsumer
    /// How much food is consumed by the consumer per one second
    function foodConsumedPerSecond() returns food 
    /// If caller of the interface cannot provide food for the consumer
    /// he should call the function with 0 to apply effects of 
    /// lacking of the resource and with 'foodPerTick' if the required
    /// food is consumed.
    /// dt parameter holds amount of seconds since last tick 
    function foodConsumed(food consumed, real dt)
    /// Get consuming category to aggregate results for player
    function foodConsumeCategory() returns ConsumeCategory
    /// Whom resources the consumer should consume
    function foodConsumerOwner() returns player 

/// Callback that is called when new food consumer is added to global array
public interface FoodConsumerAddedCb 
    function foodConsumerAdded(FoodConsumer v)

/// Global array for callbacks for adding new food consumer event
public class FoodConsumerAdded 
    use StaticArray<FoodConsumerAddedCb>
    
    /// Call this to add new consumer callback
    static function register(FoodConsumerAddedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodConsumer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodConsumerAdded(v)

/// Callback that is called when new food consumer is added to global array
public interface FoodConsumerRemovedCb 
    function foodConsumerRemoved(FoodConsumer v)

/// Global array of callbacks for food consumer removal event
public class FoodConsumerRemoved 
    use StaticArray<FoodConsumerRemovedCb>

    /// Call this to add new callback for consumer removed event
    static function register(FoodConsumerRemovedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodConsumer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodConsumerRemoved(v)

/// Callback that is called when a food consumer is changes stats
public interface FoodConsumerChangedCb 
    function foodConsumerChanged(FoodConsumer v)

/// Here callbacks for event about changed consumer stats are stored
public class FoodConsumerChanged
    use StaticArray<FoodConsumerChangedCb>

    /// Call this to add new callback
    static function register(FoodConsumerChangedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodConsumer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodConsumerChanged(v)