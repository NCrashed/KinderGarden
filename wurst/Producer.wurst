package Producer

import Resources 
import Array 

/// Producers can be aggregate to large groups 
/// that is used to display summary for player 
/// about producing a resource by category 
public enum ProduceCategory
    /// Produced by gathering by villagers 
    VILLAGER 

/// Defines an entity that produces food periodically
///
/// Note that all producers should also handle add/remove 
/// events via 'FoodProducerAdded' and 'FoodProducerRemoved'
public interface FoodProducer 
    /// How much food is produced per one second
    function foodProducedPerSecond() returns food
    /// Called when a food is produced by this producer (called by special thread)
    /// dt parameter holds amount of seconds since last call. 
    function foodProduced(food produced, real dt)
    /// Get producing category to aggregate results for player
    function foodProduceCategory() returns ProduceCategory
    /// Who is owner, whom resources are increased
    function foodProduceOwner() returns player 

/// Callback that is called when new food producer is added to global array
public interface FoodProducerAddedCb 
    function foodProducerAdded(FoodProducer v)
    
/// Global array with callbacks for food producer addition event
public class FoodProducerAdded 
    use StaticArray<FoodProducerAddedCb> 

    /// Call this to add new consumer callback
    static function register(FoodProducerAddedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodProducerAdded(v)

/// Callback that is called when new food producer is added to global array
public interface FoodProducerRemovedCb 
    function foodProducerRemoved(FoodProducer v)

/// Global array with callbacks for food producer removal event
public class FoodProducerRemoved 
    use StaticArray<FoodProducerRemovedCb>

    /// Call this to add new callback for producer removed event
    static function register(FoodProducerRemovedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodProducerRemoved(v)

/// Callback that is called when food producer updates its stats
public interface FoodProducerChangedCb 
    function foodProducerChanged(FoodProducer v)

/// Global array with callbacks for food producer changed event
public class FoodProducerChanged 
    use StaticArray<FoodProducerChangedCb>

    /// Call this to add new callback for producer changed event
    static function register(FoodProducerChangedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(FoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).foodProducerChanged(v)

/// Defines an entity that produces wood periodically
///
/// Note that all producers should also handle add/remove 
/// events via 'WoodProducerAdded' and 'WoodProducerRemoved'
public interface WoodProducer 
    /// How much wood is produced per one second
    function woodProducedPerSecond() returns wood
    /// Called when a wood is produced by this producer (called by special thread)
    /// dt parameter holds amount of seconds since last call. 
    function woodProduced(wood produced, real dt)
    /// Get producing category to aggregate results for player
    function woodProduceCategory() returns ProduceCategory
    /// Who is owner, whom resources are increased
    function woodProduceOwner() returns player 

/// Callback that is called when new wood producer is added to global array
public interface WoodProducerAddedCb 
    function woodProducerAdded(WoodProducer v)
    
/// Global array with callbacks for wood producer addition event
public class WoodProducerAdded 
    use StaticArray<WoodProducerAddedCb> 

    /// Call this to add new consumer callback
    static function register(WoodProducerAddedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(WoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).woodProducerAdded(v)

/// Callback that is called when new wood producer is added to global array
public interface WoodProducerRemovedCb 
    function woodProducerRemoved(WoodProducer v)

/// Global array with callbacks for wood producer removal event
public class WoodProducerRemoved 
    use StaticArray<WoodProducerRemovedCb>

    /// Call this to add new callback for producer removed event
    static function register(WoodProducerRemovedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(WoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).woodProducerRemoved(v)

/// Callback that is called when wood producer updates its stats
public interface WoodProducerChangedCb 
    function woodProducerChanged(WoodProducer v)

/// Global array with callbacks for wood producer changed event
public class WoodProducerChanged 
    use StaticArray<WoodProducerChangedCb>

    /// Call this to add new callback for producer changed event
    static function register(WoodProducerChangedCb v)
        addArrayItem(v)

    /// Triggers all stored callbacks
    static function triggerAll(WoodProducer v)
        let n = arrayLength()
        for i=0 to n-1 
            getArrayItem(i).woodProducerChanged(v)