package UnitWrapper

import UnitIndexer

/// Wrapper around user that automatically is destroyed when unit is removed or decayed.
public abstract class UnitWrapper 
    unit u
    static hashtable instances

    /// Called when the instance of class is destroyed
    abstract function onDestroy()

    /// Wrap existing unit
    construct(unit pu)
        u = pu 
        instances.saveInt(pu.getHandleId(), 0, this castTo int)

    ondestroy
        onDestroy()
        instances.removeInt(u.getHandleId(), 0)
        u.remove()
    
    /// Allows to find UnitWrapper that is associated with given unit (or null if no such object)
    static function getInstanceThatBelongsTo(unit pu) returns thistype
        return instances.loadInt(pu.getHandleId(), 0) castTo thistype

    /// Get internal unit
    function getUnit() returns unit 
        return u 

init
    UnitWrapper.instances = InitHashtable()
    onUnitDeindex() -> 
        let o = UnitWrapper.getInstanceThatBelongsTo(getDeindexedUnit())
        if o != null 
            destroy o